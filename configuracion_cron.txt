# Configuraci√≥n de Cron para Sistema de Facturaci√≥n Automatizado
# Instrucciones para configurar tareas programadas en Linux y Windows

# =============================================
# CONFIGURACI√ìN PARA LINUX (CRON)
# =============================================

# Para editar el crontab del usuario actual:
# crontab -e

# Agregar las siguientes l√≠neas al crontab:

# Generar facturas todos los d√≠as a las 01:00
0 1 * * * /ruta/completa/al/proyecto/generador_facturas.sh >> /ruta/completa/al/proyecto/cron_execution.log 2>&1

# Enviar correos todos los d√≠as a las 02:00
0 2 * * * /usr/bin/python3 /ruta/completa/al/proyecto/enviador.py >> /ruta/completa/al/proyecto/cron_execution.log 2>&1

# Procesar usuarios temporales todos los d√≠as a las 03:00 (solo si hay archivo)
0 3 * * * [ -f /ruta/completa/al/proyecto/datos/empleados.csv ] && /usr/bin/powershell /ruta/completa/al/proyecto/usuarios.ps1 >> /ruta/completa/al/proyecto/cron_execution.log 2>&1

# Alternativa: Usar el script orquestador completo
# Ejecutar proceso completo todos los d√≠as a las 01:00
0 1 * * * /ruta/completa/al/proyecto/cron_job.sh

# Limpiar logs antiguos semanalmente (domingos a las 00:30)
30 0 * * 0 find /ruta/completa/al/proyecto/logs -name "*.log" -mtime +7 -delete

# Variables de entorno para cron (agregar al inicio del crontab)
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
MAILTO=admin@mercadoirsi.com

# =============================================
# SCRIPT DE INSTALACI√ìN AUTOM√ÅTICA PARA LINUX
# =============================================

#!/bin/bash
# instalar_cron.sh - Script para configurar autom√°ticamente las tareas cron

# Obtener directorio actual del proyecto
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Crear backup del crontab actual
crontab -l > crontab_backup_$(date +%Y%m%d_%H%M%S).txt 2>/dev/null || true

# Crear nueva configuraci√≥n de cron
cat << EOF > temp_crontab
# Configuraci√≥n autom√°tica - Sistema de Facturaci√≥n Mercado IRSI
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
MAILTO=admin@mercadoirsi.com

# Proceso completo de facturaci√≥n (01:00 diario)
0 1 * * * $PROJECT_DIR/cron_job.sh

# Limpiar logs antiguos (domingos 00:30)
30 0 * * 0 find $PROJECT_DIR/logs -name "*.log" -mtime +7 -delete 2>/dev/null

# Limpiar PDFs antiguos (primer d√≠a del mes, 23:59)
59 23 1 * * find $PROJECT_DIR/facturas_pdf -name "*.pdf" -mtime +30 -delete 2>/dev/null
EOF

# Instalar nueva configuraci√≥n
crontab temp_crontab
rm temp_crontab

echo "‚úÖ Configuraci√≥n de cron instalada exitosamente"
echo "üìÑ Backup del crontab anterior guardado como: crontab_backup_*.txt"
echo "üîç Para verificar: crontab -l"

# =============================================
# CONFIGURACI√ìN PARA WINDOWS (TASK SCHEDULER)
# =============================================

# Script PowerShell para configurar Task Scheduler
# configurar_tareas_windows.ps1

# Ejecutar como Administrador
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "Este script debe ejecutarse como Administrador" -ForegroundColor Red
    exit 1
}

$ProjectPath = $PSScriptRoot

# Crear tarea para generaci√≥n de facturas (01:00 diario)
$action1 = New-ScheduledTaskAction -Execute "bash" -Argument "$ProjectPath\generador_facturas.sh"
$trigger1 = New-ScheduledTaskTrigger -Daily -At "01:00"
$settings1 = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
$principal1 = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount

Register-ScheduledTask -TaskName "MercadoIRSI_GenerarFacturas" -Action $action1 -Trigger $trigger1 -Settings $settings1 -Principal $principal1 -Description "Generaci√≥n autom√°tica de facturas"

# Crear tarea para env√≠o de correos (02:00 diario)
$action2 = New-ScheduledTaskAction -Execute "python" -Argument "$ProjectPath\enviador.py"
$trigger2 = New-ScheduledTaskTrigger -Daily -At "02:00"

Register-ScheduledTask -TaskName "MercadoIRSI_EnviarCorreos" -Action $action2 -Trigger $trigger2 -Settings $settings1 -Principal $principal1 -Description "Env√≠o autom√°tico de facturas por correo"

# Crear tarea para gesti√≥n de usuarios (03:00 diario)
$action3 = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-File $ProjectPath\usuarios.ps1"
$trigger3 = New-ScheduledTaskTrigger -Daily -At "03:00"

Register-ScheduledTask -TaskName "MercadoIRSI_GestionUsuarios" -Action $action3 -Trigger $trigger3 -Settings $settings1 -Principal $principal1 -Description "Gesti√≥n de usuarios temporales"

Write-Host "‚úÖ Tareas programadas configuradas exitosamente" -ForegroundColor Green

# =============================================
# CONFIGURACI√ìN MANUAL WINDOWS TASK SCHEDULER
# =============================================

# 1. Abrir Task Scheduler (taskschd.msc)
# 2. Crear Tarea B√°sica o Tarea...
# 3. Configurar los siguientes par√°metros:

# TAREA 1: Generaci√≥n de Facturas
# Nombre: MercadoIRSI_GenerarFacturas
# Disparador: Diario a las 01:00
# Acci√≥n: Iniciar programa
#   Programa: bash (o ruta completa a bash.exe)
#   Argumentos: generador_facturas.sh
#   Iniciar en: C:\ruta\del\proyecto

# TAREA 2: Env√≠o de Correos
# Nombre: MercadoIRSI_EnviarCorreos
# Disparador: Diario a las 02:00
# Acci√≥n: Iniciar programa
#   Programa: python (o ruta completa a python.exe)
#   Argumentos: enviador.py
#   Iniciar en: C:\ruta\del\proyecto

# TAREA 3: Gesti√≥n de Usuarios
# Nombre: MercadoIRSI_GestionUsuarios
# Disparador: Diario a las 03:00
# Acci√≥n: Iniciar programa
#   Programa: powershell.exe
#   Argumentos: -File usuarios.ps1
#   Iniciar en: C:\ruta\del\proyecto

# =============================================
# MONITOREO Y LOGS
# =============================================

# Script para verificar estado de las tareas
# verificar_sistema.sh

#!/bin/bash
echo "=== VERIFICACI√ìN DEL SISTEMA DE FACTURACI√ìN ==="

# Verificar archivos necesarios
echo "üìÅ Verificando archivos del sistema..."
files_required=("generador_compras.py" "generador_facturas.sh" "enviador.py" "plantilla_factura_IRSI.tex")

for file in "${files_required[@]}"; do
    if [[ -f "$file" ]]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file - FALTANTE"
    fi
done

# Verificar permisos de ejecuci√≥n
echo -e "\nüîê Verificando permisos..."
if [[ -x "generador_facturas.sh" ]]; then
    echo "‚úÖ generador_facturas.sh ejecutable"
else
    echo "‚ùå generador_facturas.sh sin permisos de ejecuci√≥n"
    echo "   Ejecutar: chmod +x generador_facturas.sh"
fi

# Verificar dependencias
echo -e "\nüì¶ Verificando dependencias..."

if command -v python3 &> /dev/null; then
    echo "‚úÖ Python3 instalado: $(python3 --version)"
else
    echo "‚ùå Python3 no encontrado"
fi

if command -v pdflatex &> /dev/null; then
    echo "‚úÖ pdflatex instalado: $(pdflatex --version | head -1)"
else
    echo "‚ùå pdflatex no encontrado"
fi

# Verificar m√≥dulos Python
echo -e "\nüêç Verificando m√≥dulos Python..."
python3 -c "import faker, smtplib; print('‚úÖ M√≥dulos Python OK')" 2>/dev/null || echo "‚ùå M√≥dulos Python faltantes"

# Verificar logs recientes
echo -e "\nüìä Estado de logs..."
if [[ -f "log_diario.log" ]]; then
    last_entry=$(tail -1 log_diario.log)
    echo "üìù √öltima entrada: $last_entry"
else
    echo "‚ö†Ô∏è  No hay log diario"
fi

# Verificar cron jobs (Linux)
if command -v crontab &> /dev/null; then
    echo -e "\n‚è∞ Verificando cron jobs..."
    if crontab -l | grep -q "generador_facturas"; then
        echo "‚úÖ Cron configurado"
    else
        echo "‚ö†Ô∏è  Cron no configurado"
    fi
fi

echo -e "\n=== FIN DE VERIFICACI√ìN ==="

# =============================================
# INSTALACI√ìN COMPLETA DEL SISTEMA
# =============================================

# setup.sh - Script de instalaci√≥n completa

#!/bin/bash
set -e

echo "üöÄ INSTALACI√ìN DEL SISTEMA DE FACTURACI√ìN MERCADO IRSI"

# Crear directorios necesarios
echo "üìÅ Creando estructura de directorios..."
mkdir -p datos logs facturas_pdf

# Dar permisos de ejecuci√≥n
echo "üîê Configurando permisos..."
chmod +x generador_facturas.sh
chmod +x cron_job.sh

# Verificar dependencias
echo "üì¶ Verificando dependencias..."

# Python y m√≥dulos
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 no est√° instalado"
    echo "   Ubuntu/Debian: sudo apt install python3 python3-pip"
    echo "   CentOS/RHEL: sudo yum install python3 python3-pip"
    exit 1
fi

# Instalar m√≥dulos Python si no est√°n
python3 -c "import faker" 2>/dev/null || pip3 install faker
python3 -c "import smtplib" 2>/dev/null || echo "‚úÖ smtplib ya incluido en Python"

# LaTeX
if ! command -v pdflatex &> /dev/null; then
    echo "‚ùå pdflatex no est√° instalado"
    echo "   Ubuntu/Debian: sudo apt install texlive-latex-base texlive-latex-extra"
    echo "   CentOS/RHEL: sudo yum install texlive texlive-latex"
    exit 1
fi

# Generar datos de prueba
echo "üß™ Generando datos de prueba..."
python3 generador_compras.py 5

# Configurar cron (opcional)
read -p "¬øDesea configurar las tareas autom√°ticas? (y/n): " configure_cron
if [[ $configure_cron == "y" || $configure_cron == "Y" ]]; then
    ./instalar_cron.sh
fi

echo "‚úÖ Instalaci√≥n completada"
echo "üìö Consulte README.md para instrucciones de uso"

# =============================================
# DOCUMENTACI√ìN DE USO
# =============================================

# README - Gu√≠a de uso del sistema

SISTEMA DE FACTURACI√ìN AUTOMATIZADO - MERCADO IRSI
==================================================

ESTRUCTURA DEL PROYECTO:
- generador_compras.py   : Simula transacciones de clientes
- plantilla_factura_IRSI.tex : Plantilla LaTeX para facturas
- generador_facturas.sh  : Genera PDFs desde CSV
- enviador.py           : Env√≠a facturas por correo
- usuarios.ps1          : Gestiona usuarios temporales (Windows)
- cron_job.sh           : Orquesta todo el proceso

USO MANUAL:
1. Generar compras: python3 generador_compras.py 10
2. Generar facturas: ./generador_facturas.sh
3. Enviar correos: python3 enviador.py

USO AUTOMATIZADO:
- Linux: Configurar cron con instalar_cron.sh
- Windows: Ejecutar configurar_tareas_windows.ps1

PERSONALIZACI√ìN:
- Editar SMTP_CONFIG en enviador.py
- Modificar plantilla_factura_IRSI.tex
- Ajustar horarios en configuraci√≥n de cron

LOGS:
- log_diario.log: Registro general
- log_envios.csv: Resultados de env√≠o
- cron_execution.log: Ejecuci√≥n automatizada